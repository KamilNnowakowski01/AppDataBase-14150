// <auto-generated />
using System;
using AppDataBase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppDataBase.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppModel.Models.Computer", b =>
                {
                    b.Property<int>("ComputerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComputerId"));

                    b.Property<DateTime>("DateOfProduction")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemoryDisk")
                        .HasColumnType("int");

                    b.Property<int>("MemoryRam")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Processor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.HasKey("ComputerId");

                    b.HasIndex("ProducerId");

                    b.ToTable("Computers");

                    b.HasData(
                        new
                        {
                            ComputerId = 1,
                            DateOfProduction = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemoryDisk = 512,
                            MemoryRam = 16,
                            Name = "Gamer Extreme",
                            Processor = "Intel Core i7-10700K",
                            ProducerId = 1
                        },
                        new
                        {
                            ComputerId = 2,
                            DateOfProduction = new DateTime(2022, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemoryDisk = 256,
                            MemoryRam = 8,
                            Name = "Office Pro",
                            Processor = "Intel Core i7-10700K",
                            ProducerId = 2
                        },
                        new
                        {
                            ComputerId = 3,
                            DateOfProduction = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemoryDisk = 1024,
                            MemoryRam = 32,
                            Name = "Workstation Power",
                            Processor = "AMD Ryzen 9 5900X",
                            ProducerId = 3
                        },
                        new
                        {
                            ComputerId = 4,
                            DateOfProduction = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemoryDisk = 512,
                            MemoryRam = 16,
                            Name = "Ultra Slim",
                            Processor = "Intel Core i5-11600K",
                            ProducerId = 4
                        },
                        new
                        {
                            ComputerId = 5,
                            DateOfProduction = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemoryDisk = 2048,
                            MemoryRam = 64,
                            Name = "Graphic Designer Pro",
                            Processor = "Intel Core i5-11600K",
                            ProducerId = 1
                        },
                        new
                        {
                            ComputerId = 6,
                            DateOfProduction = new DateTime(2023, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemoryDisk = 128,
                            MemoryRam = 4,
                            Name = "Budget Friendly",
                            Processor = "AMD Ryzen 9 5900X",
                            ProducerId = 2
                        });
                });

            modelBuilder.Entity("AppModel.Models.ComputersGraphics", b =>
                {
                    b.Property<int>("ComputerId")
                        .HasColumnType("int");

                    b.Property<int>("GraphicsId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("ComputerId", "GraphicsId");

                    b.HasIndex("GraphicsId");

                    b.ToTable("ComputersGraphics");

                    b.HasData(
                        new
                        {
                            ComputerId = 1,
                            GraphicsId = 7,
                            Id = 1
                        },
                        new
                        {
                            ComputerId = 2,
                            GraphicsId = 3,
                            Id = 2
                        },
                        new
                        {
                            ComputerId = 3,
                            GraphicsId = 1,
                            Id = 3
                        },
                        new
                        {
                            ComputerId = 4,
                            GraphicsId = 5,
                            Id = 4
                        },
                        new
                        {
                            ComputerId = 5,
                            GraphicsId = 2,
                            Id = 5
                        },
                        new
                        {
                            ComputerId = 6,
                            GraphicsId = 4,
                            Id = 6
                        },
                        new
                        {
                            ComputerId = 1,
                            GraphicsId = 2,
                            Id = 7
                        },
                        new
                        {
                            ComputerId = 3,
                            GraphicsId = 6,
                            Id = 8
                        },
                        new
                        {
                            ComputerId = 5,
                            GraphicsId = 7,
                            Id = 9
                        });
                });

            modelBuilder.Entity("AppModel.Models.Graphics", b =>
                {
                    b.Property<int>("GraphicsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GraphicsId"));

                    b.Property<string>("ConnectorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CoreClockMHz")
                        .HasColumnType("int");

                    b.Property<int>("MemoryGB")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecommendedPower")
                        .HasColumnType("int");

                    b.HasKey("GraphicsId");

                    b.ToTable("Graphics");

                    b.HasData(
                        new
                        {
                            GraphicsId = 1,
                            ConnectorType = "PCIe 4.0 x16",
                            CoreClockMHz = 1440,
                            MemoryGB = 10,
                            Name = "NVIDIA RTX 3080",
                            RecommendedPower = 320
                        },
                        new
                        {
                            GraphicsId = 2,
                            ConnectorType = "PCIe 4.0 x16",
                            CoreClockMHz = 1815,
                            MemoryGB = 16,
                            Name = "AMD Radeon RX 6800",
                            RecommendedPower = 250
                        },
                        new
                        {
                            GraphicsId = 3,
                            ConnectorType = "PCIe 3.0 x16",
                            CoreClockMHz = 1500,
                            MemoryGB = 6,
                            Name = "NVIDIA GTX 1660 Ti",
                            RecommendedPower = 120
                        },
                        new
                        {
                            GraphicsId = 4,
                            ConnectorType = "PCIe 4.0 x8",
                            CoreClockMHz = 1717,
                            MemoryGB = 8,
                            Name = "AMD Radeon RX 5500 XT",
                            RecommendedPower = 130
                        },
                        new
                        {
                            GraphicsId = 5,
                            ConnectorType = "PCIe 3.0 x16",
                            CoreClockMHz = 1470,
                            MemoryGB = 8,
                            Name = "NVIDIA RTX 2060 Super",
                            RecommendedPower = 175
                        },
                        new
                        {
                            GraphicsId = 6,
                            ConnectorType = "PCIe 4.0 x16",
                            CoreClockMHz = 1465,
                            MemoryGB = 8,
                            Name = "AMD Radeon RX 5700",
                            RecommendedPower = 180
                        },
                        new
                        {
                            GraphicsId = 7,
                            ConnectorType = "PCIe 4.0 x16",
                            CoreClockMHz = 1395,
                            MemoryGB = 24,
                            Name = "NVIDIA RTX 3090",
                            RecommendedPower = 350
                        });
                });

            modelBuilder.Entity("AppModel.Models.Producer", b =>
                {
                    b.Property<int>("ProducerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProducerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearFounded")
                        .HasColumnType("int");

                    b.HasKey("ProducerId");

                    b.ToTable("Producers");

                    b.HasData(
                        new
                        {
                            ProducerId = 1,
                            Address = "123 Tech Drive, Silicon Valley, CA",
                            Name = "Tech Innovations Inc.",
                            YearFounded = 1984
                        },
                        new
                        {
                            ProducerId = 2,
                            Address = "456 Global Way, London, UK",
                            Name = "Global Computing Ltd.",
                            YearFounded = 1978
                        },
                        new
                        {
                            ProducerId = 3,
                            Address = "789 Innovation Parkway, Boston, MA",
                            Name = "Creative Solutions Inc.",
                            YearFounded = 1992
                        },
                        new
                        {
                            ProducerId = 4,
                            Address = "101 Mobile Avenue, Tokyo, Japan",
                            Name = "Portable Tech Co.",
                            YearFounded = 1986
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppModel.Models.Computer", b =>
                {
                    b.HasOne("AppModel.Models.Producer", "Producer")
                        .WithMany("Computers")
                        .HasForeignKey("ProducerId");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("AppModel.Models.ComputersGraphics", b =>
                {
                    b.HasOne("AppModel.Models.Computer", "Computer")
                        .WithMany("ComputersGraphics")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppModel.Models.Graphics", "Graphics")
                        .WithMany("ComputersGraphics")
                        .HasForeignKey("GraphicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Computer");

                    b.Navigation("Graphics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppModel.Models.Computer", b =>
                {
                    b.Navigation("ComputersGraphics");
                });

            modelBuilder.Entity("AppModel.Models.Graphics", b =>
                {
                    b.Navigation("ComputersGraphics");
                });

            modelBuilder.Entity("AppModel.Models.Producer", b =>
                {
                    b.Navigation("Computers");
                });
#pragma warning restore 612, 618
        }
    }
}
